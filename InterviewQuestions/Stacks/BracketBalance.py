# A bracket is considered to be any one of the following characters: (, ), {, }, [, or ].
#
# Two brackets are considered to be a matched pair if the an opening bracket (i.e., (, [, or {) occurs to the left of a closing bracket (i.e., ), ], or }) of the exact same type. There are three types of matched pairs of brackets: [], {}, and ().
#
# A matching pair of brackets is not balanced if the set of brackets it encloses are not matched. For example, {[(])} is not balanced because the contents in between { and } are not balanced. The pair of square brackets encloses a single, unbalanced opening bracket, (, and the pair of parentheses encloses a single, unbalanced closing square bracket, ].
#
# By this logic, we say a sequence of brackets is considered to be balanced if the following conditions are met:
#
# It contains no unmatched brackets.
# The subset of brackets enclosed within the confines of a matched pair of brackets is also a matched pair of brackets.
# Given  strings of brackets, determine whether each sequence of brackets is balanced. If a string is balanced, print YES on a new line; otherwise, print NO on a new line.



def matched_pair(bracket1: str , bracket2: str) -> bool:
    bracket_pairs = { "(" : ")" , "[" : "]" , "{" : "}" }
    if bracket1 in bracket_pairs and bracket_pairs[bracket1] == bracket2:
        return True
    return False

def is_opening(bracket: str):
    return bracket in ["(", "{", "["]

def is_matched(expression: str) -> bool:
    if len(expression) % 2 != 0 :
        return False
    stack = []
    for char in expression:
        if is_opening(char):
            stack.append(char)
        else:
            if len(stack) == 0:
                return False
            if matched_pair(stack[-1], char):
                stack = stack[:-1]
            else:
                return False
    if len(stack) == 0:
        return True
    return False

# Testing
# print(is_matched("{}()[[((()(({{[]}{}{{[]}}{}}))))]]{{{{([{{{{}}}}])}}}}"))


import unittest


class TestBracketBalancer(unittest.TestCase):

    def setUp(self):
        self.successSample = ['[]()([{}])[]{}[]', '{}()[[((()(({{[]}{}{{[]}}{}}))))]]{{{{([{{{{}}}}])}}}}', '{{[()()]}()}(())()()[[[]]][{[]()}(())]', '{}{[[[[[][]]]]({})]}[[]]', '[{(((([]))({{}{}[]{{()}[({[{}[]]}[][([])[]]{})[{}(){{[{}({}{{}[]}{({})}{((({})))})(){}]}}]]}})))}]', '{(){{}}}{}{{({})}}{({(){}})}', '[[()]{{}[()[([])([]{}[])]]}]', '[]{()({}[[]])}{}[()[[]]][]', '[][]{}({({})}({})()(){})', '[[()({()([()])()}[][])]][]([](){}{[{{}{[]()}}{{()}}{}]})(){}[[[(([]))]][]{[][]{()}()[[()]]}]', '({([{}{((){}()[])}])})', '{[[[[([{}]{{}(){}}[]){}]]]][{}]{}()}{}()[[[(([])){[]}]]]{}(())(){[]{[(([]()()))]}}[([]){}()]{{[{}]}}', '{{[]{}}}[{[]}[{}]{}][](()[])[][([([[({{(()(()()[[[[]()]()()]()]){})(([[]{}]))}})]]())])]', '[({[][]}({{}[[{}{}()]]{()}}){{}[]{}{{()}}})]', '[]{}{()}[[]]{}(([])){}{}()[]{}{[(()){}{()}]({}){({})}}[[{{}[()]}{()}]]{{}}{()}{}{{}[]}', '[][{{[[{}(){}(())]{[{}]({})}]{}[[[{}[[]]]{}]]}}][([])([]())]', '{(({}{}[{}()]{[]{}}))}', '[][][{}]{()(()({{{[]}[(){[][[(){{}}][{}][]{()}[(([[]{}[[](()[[]])]]){()}[])(([]()))]]}]}}))}', '{[{{[[]]{}[{}]}{}}][](){}[[]]}[][](((({}))))[]{()}', '({}){{}}[]{}{}[{}(){}][][]{}[({{{[()]}({}{{}}[[]()])}[{[([[]{()}()]){}]}]})]', '[]', '[[([[]({[]}())])]](){}()()[]()[()][{}()](){[]}', '[]{}[]{}[]({[{[]}]})', '({}({}))()()({(())}{{[]}{}[]((([[[][([][[]{}(()())()][][({})][]{}[]()[](()){})]]])))})', '(([[({})]()][])()()[])', '[({[(()[([{[][][]}])()]()[][])]})][](){{}[{}]}', '{([()][[{[[]()]}({()}){()[{()}]}]])}', '[()][]({}){}[]()[()]{(([]))[{}]}{}{}()[[](){}]()[{()()}{}][][({}[])]{}{}[]()', '[][]()[]()({}){[{}[]{{}}{[]}[{(){[]{}()([][]())()}[[([])]]}]]}', '()()[]{}[](){}[][]()[][][](()(())){}{{(){[[()]]{}{{}}}}}', '(()){[[{}{{}}]]}', '{()()}{{[][[[{[][()][(()){[{}{}(({()}))[()](){}][]}({([({})](){})})]{(()()[(([{}]))])}}]]]}}', '(()){(){}[](()[])[]}()[[][]]()(){}{{}}()({}([({})([])])([[[]]][()])())()(){}[][{[([([{}{({})}])])]}]', '[[]][{{}[]}][[]{}([(({{}}[]([]{})))()])((()[]))]{(){}{}}({})[[]{}]()[{}]()(){}[[(())[()]]]', '(){}{()()((()([]{()}))[][({{{}{}()}[({}[(){}(()[[()[]]({}{}){}])]{})]}{})])}']
        self.failureSample = ['[]][{]{(({{)[})(}[[))}{}){[{]}{})()[{}]{{]]]){{}){({(}](({[{[{)]{)}}}({[)}}([{{]]({{', ')}{){(]{)([)}{)]())[(})[]]))({[[[)}[((]](])][({[]())', '[}}{}]{[{)}[{(([)(([)(](}(]([}(()[)])}[{[{{](([]()[[[])([}}])){}(][)]{(]{)]]()({}}}(((]{]]', '(}{(()[][[){{}{{[}][]{{{{[{{[](}{)}](}}()]}(}(}}]}[](]]){{{()}({[[}}{{[]}(]}{(]{}}[()(}]{[[]{){{', ')}}}){}{](]}){}((]]{][)]({[{)])[{])}(]]][)[{[}()[}])}}}]}}})]))[', '))())][})[{)]]})[({}[){)([])[}{}]{])({]{}}[(({({])]}', ')][)]}([]]))(]){}({{[]({{{({)]]}]{[}]]([)][[[()[][[}{}(]){(()[)[[[{]{)]}{{)[][()]{}(({]}])', '{]({}[[)[}([][[[)]()(]((}}}{}){}{}{]({][(]}()[}}{[{[((])})]{}}](}[[[){(([)({()[{(}}({}{]][)}(}({([(]', '{[])[))[)}}]}([}()}{{]}[)}{)}[}}]])}((((])[)[[()[{({](}]', '{}{([{{{{}})]{)]()[[}(}{', '{}))))((])({{[[}{])([})[([(]([)()(()(][](}]}])({]{()}[()(){[}(([[{{)}]]}(})((]}[([[()(', '}{)[(}]])[{)([()[})((}}]{]{{]([[]{{]([[{}[}(]]}({[{{))]][]]{}}])]([]())]](([}(}([[)}())([{', ')}}[({}}]{', ')()[(}}[{}[])))}({', '{][{(}[)()(}[)(]()(){))}]}]({)({}(}]', '{]))}}{)[}}(]()[]))]](]}([{}]}(}[){])(', '()])}{])(]})){){)){][}[{}[}[}[()[(({{{][[{}}{]]])}]([)][({', '[[}]((({}()})[]][([(}]][', '({]][[){[((([][[)[', '}[]{{]}{[{]]}[]}}](}[]}[)]){{)](}]}]}]][(]}(((})])([{}', '()}}}[)}([}})[(}', '(}(]}()(])()]}}{[]{(]]((]])}](}{}){{][[}{([[())([((}[](]([][[)})[[}[){[(}{]]][()[}', '}]([([[[{}{](({([])){[)([([(}}}}[{})(}](()]((](])})}]])){]}{}]()]](]])]]]]', '[(]){[}]}([[){){}[[}}}())})]})({](]{}([(][[]]()[[])}])', '{{)))}])(({){])]}{}]{})[]){)}(]{])][]{(}{{{)}{{[((]][]){](]()}])][](((]{{{', '){}[{())(]({]}]]){)]{((}{[{){[([([})]}])))}}[([([){({[[{}}{)}{', ')(][()){}{[}[{[[{({})([{{{)({[([)]]][[{(){}[{}(}[[{])(({([[)({}{{)}())}}})[({}])[(({({{{})[)((', '})[)}[[[}(}[()])}([[)]()[)([{)(][)]})]{[}{({)))(()[)}[)[](', '{[[[})){}){}[[((]][{[({}([{{[({[)]{)])[[[{((]{){]{))(}({}[([({}){[(}{(]]{}[{)({]]{}}}()]([', '{}}][[){(}{][}{{[))[(])(]][}{][}[)})({(][(}[{})[{){}', ']}[(][})))}{){(])[}]))()}[)][){({[{(]]]}[[]{)([{([)[{)[]][)((([[(([}', '}{){{]})])}]', '[}[)]]]((]}){(](]{]]([)))][](]{]]]({{}]]]){)}})[()))({[[[([{}{))()[((]}]]{[}](}}}))}[[}[[{})', '[)[[[(]]{[{[]]', '])}[{}][)]){(}))({([(}}[{{}[}](]{[][]()]([]{{{}})[))(]', '}(}}', ')})()([)[}){', '{())))[[(]{[}(])()()[}}((][{[{))}{{}}[){]}()}(]{]]})}{[(][][((]]]}(}]}])])}})]{}]{]([)({', '({]}]]']

    def testSuccess(self):
        for sample in self.successSample:
            print(sample)
            self.assertTrue(is_matched(sample))

    def testFailures(self):
        for sample in self.failureSample:
            self.assertFalse(is_matched(sample))
